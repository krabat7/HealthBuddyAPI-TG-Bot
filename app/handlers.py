import os
import random
from datetime import datetime
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.storage
from app.utils import *
from app.keyboards import main_menu, workout_types, confirmation_keyboard
from app.storage import save_data
from api.api import get_weather, get_calories_from_usda
from data.recommendations import low_calorie_foods, workout_recommendations


router = Router()

class ProfileSetup(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()

class WaterLogging(StatesGroup):
    waiting_for_amount = State()

class FoodLogging(StatesGroup):
    waiting_for_food = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@router.message(Command("start"))
async def cmd_start(message: Message):
    commands_info = get_commands_info()
    profile_info = await get_profile_info(message.from_user.id)

    if profile_info:
        await message.answer(
            f"{commands_info}\n\n{profile_info}",
            reply_markup=main_menu,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"{commands_info}\n\n"
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å <b>–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.",
            reply_markup=main_menu,
            parse_mode="HTML"
        )

# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.
@router.message(Command("main_menu"))
async def log_main_menu(message: Message):
    commands_info = get_commands_info()
    profile_info = await get_profile_info(message.from_user.id)

    if profile_info:
        await message.answer(
            f"{commands_info}\n\n{profile_info}",
            reply_markup=main_menu,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"{commands_info}\n\n"
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å <b>–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.",
            reply_markup=main_menu,
            parse_mode="HTML"
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    
    if user_id in app.storage.users:
        await message.answer(
            "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. \n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–Ω–∞—á–∞–ª–∞ <b>—É–¥–∞–ª–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b> —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /delete_data –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é.",
            parse_mode="HTML"
        )
        return
    
    await state.set_state(ProfileSetup.weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(ProfileSetup.weight)
async def set_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        if weight <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        await state.update_data(weight=weight)
        await state.set_state(ProfileSetup.height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    except ValueError as e:
        await message.answer(str(e))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(ProfileSetup.height)
async def set_height(message: Message, state: FSMContext):
    try:
        await state.update_data(height=int(message.text))
        await state.set_state(ProfileSetup.age)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(ProfileSetup.age)
async def set_age(message: Message, state: FSMContext):
    try:
        await state.update_data(age=int(message.text))
        await state.set_state(ProfileSetup.activity)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–µ–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(ProfileSetup.activity)
async def set_activity(message: Message, state: FSMContext):
    await state.update_data(activity=int(message.text))
    await state.set_state(ProfileSetup.city)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? (eng)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(ProfileSetup.city)
async def set_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()

    temperature = get_weather(data["city"])
    if temperature is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.")
        return
        
    user_id = str(message.from_user.id)
    app.storage.users[user_id] = {
        "weight": data["weight"],
        "height": data["height"],
        "age": data["age"],
        "activity": data["activity"],
        "city": data["city"],
        "logged_water": 0,
        "logged_calories": 0,
        "water_goal": 0,
        "calorie_goal": 0,
        "extra_water": 0,
        "extra_calories": 0,
        "burned_calories": 0,
        "last_updated": datetime.now().date().isoformat(),
        **calculate_goals(data["weight"], data["height"], data["age"], data["activity"], temperature),
    }

    save_data()

    await state.clear()
    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —É—Å–ø–µ—à–Ω–æ —É—á—Ç–µ–Ω—ã.", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã
@router.message(Command("log_water"))
async def log_water(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> (–≤ –º–ª)")
        return
    try:
        amount = int(args[1])
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–ª).")
    
    try:
        user = get_user_data(message.from_user.id)
        user["logged_water"] = user.get("logged_water", 0) + amount

        save_data()

        await message.answer(f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª. –í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª.")
    except ValueError as e:
        await message.answer(str(e))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
@router.message(Command("log_food"))
async def log_food(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (eng)>")
        return

    product_name = args[1]
    food_info = get_calories_from_usda(product_name)
    if food_info is None:
        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        user = get_user_data(message.from_user.id)
        calories = food_info["calories"]
        user["logged_calories"] = user.get("logged_calories", 0) + calories
        
        save_data()

        await message.answer(
            f"üçé {food_info['name']} —Å–æ–¥–µ—Ä–∂–∏—Ç {calories} –∫–∫–∞–ª –Ω–∞ 100 –≥. –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫. "
            f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª."
        )
    except ValueError as e:
        await message.answer(str(e))

# –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.message(Command("log_workout"))
async def log_workout(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=workout_types)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.callback_query(F.data.startswith("workout_"))
async def handle_workout_type(callback: CallbackQuery):
    workout_type = callback.data.split("_")[1]
    duration = 30  # –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try:
        user = get_user_data(callback.from_user.id)

        extra_water = (duration // 30) * 200
        extra_calories = duration * 10
        user["extra_water"] = user.get("extra_water", 0) + extra_water
        user["extra_calories"] = user.get("extra_calories", 0) + extra_calories
        user["burned_calories"] = user.get("burned_calories", 0) + extra_calories

        save_data()

        await callback.message.answer(
            f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} ({duration} –º–∏–Ω—É—Ç):\n"
            f"üî• –°–æ–∂–∂–µ–Ω–æ: {extra_calories} –∫–∫–∞–ª.\n"
            f"üíß –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –≤–æ–¥–µ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {extra_water} –º–ª."
        )
        await callback.answer()
    except ValueError as e:
        await callback.answer(str(e))

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def handle_log_workout_button(message: Message):
    await log_workout(message)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu(message: Message):
    await log_main_menu(message)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("delete_data"))
async def delete_data_text(message: Message):
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=confirmation_keyboard
    )

# –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data == "confirm")
async def confirm_action(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id in app.storage.users:
        app.storage.users.pop(user_id, None)

        save_data()

        await callback.message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    await callback.answer()

# –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery):
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
@router.message(Command("check_progress"))
async def check_progress(message: Message):
    try:
        user = get_user_data(message.from_user.id)

        water_goal = user["water_goal"] + user.get("extra_water", 0)
        calorie_goal = user["calorie_goal"] + user.get("extra_calories", 0)

        logged_water = user.get("logged_water", 0)
        logged_calories = user.get("logged_calories", 0)
        burned_calories = user.get("burned_calories", 0)

        file_path = f"progress_{message.from_user.id}.png"
        generate_progress_graph(user, file_path)

        water_progress = f"üíß –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª."
        calorie_progress = (
            f"üçé –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
            f"üî• –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª."
        )

        await message.answer(f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n{water_progress}\n{calorie_progress}")
        
        photo = FSInputFile(file_path)
        await message.answer_photo(photo)

    except ValueError as e:
        await message.answer(str(e))
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def handle_check_progress_button(message: Message):
    await check_progress(message)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def handle_setup_profile_button(message: Message, state: FSMContext):
    await set_profile(message, state)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def handle_delete_data_button(message: Message):
    await delete_data_text(message)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã
@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å –≤–æ–¥—É")
async def handle_log_water_button(message: Message, state: FSMContext):
    await state.set_state(WaterLogging.waiting_for_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–≤ –º–ª):")

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É")
async def handle_log_food_button(message: Message, state: FSMContext):
    await state.set_state(FoodLogging.waiting_for_food)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (eng):")

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@router.message(F.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def handle_recommend_button(message: Message):
    await recommend(message)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@router.message(F.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def handle_recommend_button(message: Message):
    await recommend(message)

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
@router.message(WaterLogging.waiting_for_amount)
async def log_water_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–ª).")

    try:
        user = get_user_data(message.from_user.id)
        user["logged_water"] = user.get("logged_water", 0) + amount

        save_data()

        await message.answer(f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª. –í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª.")
        await state.clear()
    except ValueError as e:
        await message.answer(str(e))

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω–æ–π –µ–¥–µ
@router.message(FoodLogging.waiting_for_food)
async def log_food_entry(message: Message, state: FSMContext):
    product_name = message.text.strip()
    food_info = get_calories_from_usda(product_name)
    if food_info is None:
        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    try:
        user = get_user_data(message.from_user.id)
        calories = food_info["calories"]
        user["logged_calories"] = user.get("logged_calories", 0) + calories

        save_data()

        await message.answer(
            f"üçé {food_info['name']} —Å–æ–¥–µ—Ä–∂–∏—Ç {calories} –∫–∫–∞–ª –Ω–∞ 100 –≥. –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫. "
            f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª."
        )
        await state.clear()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –Ω–∏–∑–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
@router.message(Command("recommend"))
async def recommend(message: Message):
    food = random.choice(low_calorie_foods)
    food_recommendation = (
        f"üçé –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–∏–∑–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é:\n"
        f"{food['name']} ({food['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥)."
    )

    workout = random.choice(workout_recommendations)
    workout_recommendation = (
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π:\n"
        f"{workout['type']} (—Å–∂–∏–≥–∞–µ—Ç –æ–∫–æ–ª–æ {workout['calories_burned']} –∫–∫–∞–ª –∑–∞ 30 –º–∏–Ω—É—Ç)."
    )

    await message.answer(f"{food_recommendation}\n\n{workout_recommendation}")