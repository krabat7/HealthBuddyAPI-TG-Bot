import os
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.keyboards import main_menu, workout_types, confirmation_keyboard
from app.storage import users
from app.utils import calculate_goals, get_user_data, generate_progress_graph
from app.api import get_weather, get_food_info

router = Router()

class ProfileSetup(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–¥—É –∏ –∫–∞–ª–æ—Ä–∏–∏.\n\n"
        "üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/log_water <–∫–æ–ª-–≤–æ –º–ª> - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã (–≤ –º–ª)\n"
        "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∏—â–∏\n"
        "/log_workout - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/delete_data - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é.",
        reply_markup=main_menu
    )

@router.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await state.set_state(ProfileSetup.weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

@router.message(ProfileSetup.weight)
async def set_weight(message: Message, state: FSMContext):
    try:
        await state.update_data(weight=int(message.text))
        await state.set_state(ProfileSetup.height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(ProfileSetup.height)
async def set_height(message: Message, state: FSMContext):
    try:
        await state.update_data(height=int(message.text))
        await state.set_state(ProfileSetup.age)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(ProfileSetup.age)
async def set_age(message: Message, state: FSMContext):
    try:
        await state.update_data(age=int(message.text))
        await state.set_state(ProfileSetup.activity)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(ProfileSetup.activity)
async def set_activity(message: Message, state: FSMContext):
    try:
        await state.update_data(activity=int(message.text))
        await state.set_state(ProfileSetup.city)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(ProfileSetup.city)
async def set_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()

    temperature = get_weather(data["city"])
    if temperature is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.")
        return
    
    users[message.from_user.id] = {
        "weight": data["weight"],
        "height": data["height"],
        "age": data["age"],
        "activity": data["activity"],
        "city": data["city"],
        **calculate_goals(data["weight"], data["height"], data["age"], data["activity"], temperature)
    }
    await state.clear()
    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —É—Å–ø–µ—à–Ω–æ —É—á—Ç–µ–Ω—ã.", reply_markup=main_menu)


# –ö–æ–º–∞–Ω–¥–∞ /log_water
@router.message(Command("log_water"))
async def log_water(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> (–≤ –º–ª)")
        return

    amount = int(args[1])
    
    try:
        user = get_user_data(message.from_user.id)
        user["logged_water"] = user.get("logged_water", 0) + amount
        await message.answer(f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª. –í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']} –º–ª.")
    except ValueError as e:
        await message.answer(str(e))

# –ö–æ–º–∞–Ω–¥–∞ /log_food
@router.message(Command("log_food"))
async def log_food(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>")
        return

    product_name = args[1]
    food_info = get_food_info(product_name)
    if food_info is None:
        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        user = get_user_data(message.from_user.id)
        calories = food_info["calories"]
        user["logged_calories"] = user.get("logged_calories", 0) + calories
        await message.answer(
            f"üçé {food_info['name']} —Å–æ–¥–µ—Ä–∂–∏—Ç {calories} –∫–∫–∞–ª –Ω–∞ 100 –≥. –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫. "
            f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª."
        )
    except ValueError as e:
        await message.answer(str(e))

# –ö–æ–º–∞–Ω–¥–∞ /log_workout
@router.message(Command("log_workout"))
async def log_workout(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=workout_types)

@router.callback_query(F.data.startswith("workout_"))
async def handle_workout_type(callback: CallbackQuery):
    workout_type = callback.data.split("_")[1]
    duration = 30  # –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try:
        user = get_user_data(callback.from_user.id)

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        extra_water = (duration // 30) * 200
        extra_calories = duration * 10
        user["extra_water"] = user.get("extra_water", 0) + extra_water
        user["extra_calories"] = user.get("extra_calories", 0) + extra_calories

        # –°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
        user["burned_calories"] = user.get("burned_calories", 0) + extra_calories

        await callback.message.answer(
            f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} ({duration} –º–∏–Ω—É—Ç):\n"
            f"üî• –°–æ–∂–∂–µ–Ω–æ: {extra_calories} –∫–∫–∞–ª.\n"
            f"üíß –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –≤–æ–¥–µ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {extra_water} –º–ª."
        )
        await callback.answer()
    except ValueError as e:
        await callback.answer(str(e))

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def delete_data_text(message: Message):
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=confirmation_keyboard
    )

@router.callback_query(F.data == "confirm")
async def confirm_action(callback: CallbackQuery):
    users.pop(callback.from_user.id, None)
    await callback.message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.answer()

@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery):
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def check_progress(message: Message):
    try:
        user = get_user_data(message.from_user.id)

        water_goal = user["water_goal"] + user.get("extra_water", 0)
        calorie_goal = user["calorie_goal"] + user.get("extra_calories", 0)

        logged_water = user.get("logged_water", 0)
        logged_calories = user.get("logged_calories", 0)
        burned_calories = user.get("burned_calories", 0)

        file_path = f"progress_{message.from_user.id}.png"
        generate_progress_graph(user, file_path)

        water_progress = f"üíß –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª."
        calorie_progress = (
            f"üçé –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
            f"üî• –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª."
        )

        await message.answer(f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n{water_progress}\n{calorie_progress}")
        
        photo = FSInputFile(file_path)
        await message.answer_photo(photo)

    except ValueError as e:
        await message.answer(str(e))
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def handle_setup_profile_button(message: Message, state: FSMContext):
    await set_profile(message, state)

@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def handle_log_workout_button(message: Message):
    await log_workout(message)

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def handle_check_progress_button(message: Message):
    await check_progress(message)

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def handle_delete_data_button(message: Message):
    await delete_data_text(message)